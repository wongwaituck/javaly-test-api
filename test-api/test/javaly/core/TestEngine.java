package javaly.core;

import com.google.gson.*;
import java.io.*;
import javaly.model.*;
import javaly.core.*;
import java.lang.annotation.Annotation;
import java.lang.reflect.Method;

/**
  * TestEngine is a class that enables you to run arbitrary tests from your own machine.
  * This is to allow inspection to ensure the Test class you wrote works before uploading to Javaly.
  * <p>
  * Usage:
  * <pre>
  * import javaly.core.TestEngine;
  * public class GenericTest {
  *   public static void main(String[] args){
  *     TestEngine.sampleRun(new GenericTest());
  *   }
  *
  *  {@literal @}TestCase (expected = "1")
  *   public void testX(){
  *     ...
  *   }
  *   ...
  * }
  * </pre>
  * @author      Wong Wai Tuck
  * @version     0.8
  */
public class TestEngine {
    private TestEngine(){}
  /**
    * Prints the results of the assert statements to the standard output in JSON.
    * This is to allow inspection to ensure your Test class works.
    * <p>
    * The objects to be printed must already have the <code>toString()</code> method defined.
    * <p>
    * Usage:
    * <pre>
    * import javaly.core.TestEngine;
    * public class {@literal <ClassName>} {
    *   public static void main(String[] args){
    *     TestEngine.sampleRun(new {@literal <ClassName>}());
    *   }
    * }
    * </pre>
    * @param obj    The object representing the class containing the tests, to be generated by new {@literal <TestClassName>}()
    */
    public static void sampleRun(Object obj) {
        Class<?> clazz = obj.getClass();

        // Process @TestCase
      	for (Method method : clazz.getDeclaredMethods()) {
      		// if method is annotated with @TestCase
      		if (method.isAnnotationPresent(TestCase.class)) {
      			Annotation annotation = method.getAnnotation(TestCase.class);
      			TestCase test = (TestCase) annotation;

            //redirect stdout to our own
            Test.redirectSysOut();

            try {
              method.invoke(clazz.newInstance());
            } catch (Throwable e) {
              Test.addExceptionalCase(test.expectedOutput(), e);
            }
            Test.rollbackSysOut();
            //check the result
            //if the result is from a hidden testcase then change it to a hiddenresult
            if(test.hidden()){
              Test.convertLastRunToHidden();
            }

          }

      	}

        //get the results
        Runs r = Test.getRuns();

        //Output the result as JSON to System.out
        Gson gson = new GsonBuilder().setPrettyPrinting().create();
        System.out.println(gson.toJson(r));
    }

}
